// This file is auto-generated by @hey-api/openapi-ts

export type Body_login_login_access_token = {
    grant_type?: (string | null);
    username: string;
    password: string;
    scope?: string;
    client_id?: (string | null);
    client_secret?: (string | null);
};

export type HTTPValidationError = {
    detail?: Array<ValidationError>;
};

export type Message = {
    message: string;
};

export type NewPassword = {
    token: string;
    new_password: string;
};

export type PrivateUserCreate = {
    email: string;
    password: string;
    full_name: string;
    is_verified?: boolean;
};

export type TodoCreate = {
    title: string;
    description?: (string | null);
    priority?: TodoPriority;
    status?: TodoStatus;
    due_date?: (string | null);
    todo_list_id?: (string | null);
};

export type TodoListCreate = {
    name: string;
    description?: (string | null);
    color?: (string | null);
};

export type TodoListPublic = {
    name: string;
    description?: (string | null);
    color?: (string | null);
    id: string;
    created_at: string;
    updated_at: string;
    owner_id: string;
    todos_count?: number;
};

export type TodoListsPublic = {
    data: Array<TodoListPublic>;
    count: number;
};

export type TodoListUpdate = {
    name?: (string | null);
    description?: (string | null);
    color?: (string | null);
};

export type TodoPriority = 'low' | 'medium' | 'high' | 'urgent';

export type TodoPublic = {
    title: string;
    description?: (string | null);
    priority?: TodoPriority;
    status?: TodoStatus;
    due_date?: (string | null);
    id: string;
    created_at: string;
    updated_at: string;
    completed_at: (string | null);
    owner_id: string;
    todo_list_id: (string | null);
};

export type TodosPublic = {
    data: Array<TodoPublic>;
    count: number;
};

export type TodoStatus = 'pending' | 'in_progress' | 'completed' | 'cancelled';

export type TodoUpdate = {
    title?: (string | null);
    description?: (string | null);
    priority?: (TodoPriority | null);
    status?: (TodoStatus | null);
    due_date?: (string | null);
    todo_list_id?: (string | null);
};

export type Token = {
    access_token: string;
    token_type?: string;
};

export type UpdatePassword = {
    current_password: string;
    new_password: string;
};

export type UserCreate = {
    email: string;
    is_active?: boolean;
    is_superuser?: boolean;
    full_name?: (string | null);
    password: string;
};

export type UserPublic = {
    email: string;
    is_active?: boolean;
    is_superuser?: boolean;
    full_name?: (string | null);
    id: string;
};

export type UserRegister = {
    email: string;
    password: string;
    full_name?: (string | null);
};

export type UsersPublic = {
    data: Array<UserPublic>;
    count: number;
};

export type UserUpdate = {
    email?: (string | null);
    is_active?: boolean;
    is_superuser?: boolean;
    full_name?: (string | null);
    password?: (string | null);
};

export type UserUpdateMe = {
    full_name?: (string | null);
    email?: (string | null);
};

export type ValidationError = {
    loc: Array<(string | number)>;
    msg: string;
    type: string;
};

export type LoginLoginAccessTokenData = {
    formData: Body_login_login_access_token;
};

export type LoginLoginAccessTokenResponse = (Token);

export type LoginTestTokenResponse = (UserPublic);

export type LoginRecoverPasswordData = {
    email: string;
};

export type LoginRecoverPasswordResponse = (Message);

export type LoginResetPasswordData = {
    requestBody: NewPassword;
};

export type LoginResetPasswordResponse = (Message);

export type LoginRecoverPasswordHtmlContentData = {
    email: string;
};

export type LoginRecoverPasswordHtmlContentResponse = (string);

export type PrivateCreateUserData = {
    requestBody: PrivateUserCreate;
};

export type PrivateCreateUserResponse = (UserPublic);

export type TodoListsReadTodoListsData = {
    limit?: number;
    skip?: number;
};

export type TodoListsReadTodoListsResponse = (TodoListsPublic);

export type TodoListsCreateTodoListData = {
    requestBody: TodoListCreate;
};

export type TodoListsCreateTodoListResponse = (TodoListPublic);

export type TodoListsReadTodoListData = {
    id: string;
};

export type TodoListsReadTodoListResponse = (TodoListPublic);

export type TodoListsUpdateTodoListData = {
    id: string;
    requestBody: TodoListUpdate;
};

export type TodoListsUpdateTodoListResponse = (TodoListPublic);

export type TodoListsDeleteTodoListData = {
    id: string;
};

export type TodoListsDeleteTodoListResponse = (Message);

export type TodoListsGetTodoListTodosData = {
    id: string;
    limit?: number;
    skip?: number;
};

export type TodoListsGetTodoListTodosResponse = (unknown);

export type TodosReadTodosData = {
    limit?: number;
    priority?: (TodoPriority | null);
    skip?: number;
    status?: (TodoStatus | null);
    todoListId?: (string | null);
};

export type TodosReadTodosResponse = (TodosPublic);

export type TodosCreateTodoData = {
    requestBody: TodoCreate;
};

export type TodosCreateTodoResponse = (TodoPublic);

export type TodosReadTodoData = {
    id: string;
};

export type TodosReadTodoResponse = (TodoPublic);

export type TodosUpdateTodoData = {
    id: string;
    requestBody: TodoUpdate;
};

export type TodosUpdateTodoResponse = (TodoPublic);

export type TodosDeleteTodoData = {
    id: string;
};

export type TodosDeleteTodoResponse = (Message);

export type TodosToggleTodoStatusData = {
    id: string;
};

export type TodosToggleTodoStatusResponse = (TodoPublic);

export type UsersReadUsersData = {
    limit?: number;
    skip?: number;
};

export type UsersReadUsersResponse = (UsersPublic);

export type UsersCreateUserData = {
    requestBody: UserCreate;
};

export type UsersCreateUserResponse = (UserPublic);

export type UsersReadUserMeResponse = (UserPublic);

export type UsersDeleteUserMeResponse = (Message);

export type UsersUpdateUserMeData = {
    requestBody: UserUpdateMe;
};

export type UsersUpdateUserMeResponse = (UserPublic);

export type UsersUpdatePasswordMeData = {
    requestBody: UpdatePassword;
};

export type UsersUpdatePasswordMeResponse = (Message);

export type UsersRegisterUserData = {
    requestBody: UserRegister;
};

export type UsersRegisterUserResponse = (UserPublic);

export type UsersReadUserByIdData = {
    userId: string;
};

export type UsersReadUserByIdResponse = (UserPublic);

export type UsersUpdateUserData = {
    requestBody: UserUpdate;
    userId: string;
};

export type UsersUpdateUserResponse = (UserPublic);

export type UsersDeleteUserData = {
    userId: string;
};

export type UsersDeleteUserResponse = (Message);

export type UtilsTestEmailData = {
    emailTo: string;
};

export type UtilsTestEmailResponse = (Message);

export type UtilsHealthCheckResponse = (boolean);